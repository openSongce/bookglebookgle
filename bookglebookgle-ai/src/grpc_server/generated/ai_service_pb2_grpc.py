# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import ai_service_pb2 as ai__service__pb2


class AIServiceStub(object):
    """AI Service Definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateQuiz = channel.unary_unary(
                '/bgbg.ai.AIService/GenerateQuiz',
                request_serializer=ai__service__pb2.QuizRequest.SerializeToString,
                response_deserializer=ai__service__pb2.QuizResponse.FromString,
                )
        self.ProofreadText = channel.unary_unary(
                '/bgbg.ai.AIService/ProofreadText',
                request_serializer=ai__service__pb2.ProofreadRequest.SerializeToString,
                response_deserializer=ai__service__pb2.ProofreadResponse.FromString,
                )
        self.InitializeDiscussion = channel.unary_unary(
                '/bgbg.ai.AIService/InitializeDiscussion',
                request_serializer=ai__service__pb2.DiscussionInitRequest.SerializeToString,
                response_deserializer=ai__service__pb2.DiscussionInitResponse.FromString,
                )
        self.ProcessChatMessage = channel.stream_stream(
                '/bgbg.ai.AIService/ProcessChatMessage',
                request_serializer=ai__service__pb2.ChatMessageRequest.SerializeToString,
                response_deserializer=ai__service__pb2.ChatMessageResponse.FromString,
                )
        self.EndDiscussion = channel.unary_unary(
                '/bgbg.ai.AIService/EndDiscussion',
                request_serializer=ai__service__pb2.DiscussionEndRequest.SerializeToString,
                response_deserializer=ai__service__pb2.DiscussionEndResponse.FromString,
                )
        self.EndMeeting = channel.unary_unary(
                '/bgbg.ai.AIService/EndMeeting',
                request_serializer=ai__service__pb2.MeetingEndRequest.SerializeToString,
                response_deserializer=ai__service__pb2.MeetingEndResponse.FromString,
                )
        self.GetChatHistory = channel.unary_unary(
                '/bgbg.ai.AIService/GetChatHistory',
                request_serializer=ai__service__pb2.GetChatHistoryRequest.SerializeToString,
                response_deserializer=ai__service__pb2.GetChatHistoryResponse.FromString,
                )
        self.GetChatSessionStats = channel.unary_unary(
                '/bgbg.ai.AIService/GetChatSessionStats',
                request_serializer=ai__service__pb2.ChatSessionStatsRequest.SerializeToString,
                response_deserializer=ai__service__pb2.ChatSessionStatsResponse.FromString,
                )
        self.ProcessStructuredDocument = channel.unary_unary(
                '/bgbg.ai.AIService/ProcessStructuredDocument',
                request_serializer=ai__service__pb2.ProcessDocumentRequest.SerializeToString,
                response_deserializer=ai__service__pb2.DocumentResponse.FromString,
                )
        self.ProcessPdf = channel.stream_unary(
                '/bgbg.ai.AIService/ProcessPdf',
                request_serializer=ai__service__pb2.ProcessPdfRequest.SerializeToString,
                response_deserializer=ai__service__pb2.ProcessPdfResponse.FromString,
                )


class AIServiceServicer(object):
    """AI Service Definition
    """

    def GenerateQuiz(self, request, context):
        """Quiz Generation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProofreadText(self, request, context):
        """Text Proofreading
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitializeDiscussion(self, request, context):
        """Discussion Moderation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessChatMessage(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndDiscussion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndMeeting(self, request, context):
        """Meeting Management (통합 모임 종료)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChatHistory(self, request, context):
        """Chat History Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChatSessionStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessStructuredDocument(self, request, context):
        """Document Processing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessPdf(self, request_iterator, context):
        """PDF OCR Processing (includes vector DB storage)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateQuiz': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateQuiz,
                    request_deserializer=ai__service__pb2.QuizRequest.FromString,
                    response_serializer=ai__service__pb2.QuizResponse.SerializeToString,
            ),
            'ProofreadText': grpc.unary_unary_rpc_method_handler(
                    servicer.ProofreadText,
                    request_deserializer=ai__service__pb2.ProofreadRequest.FromString,
                    response_serializer=ai__service__pb2.ProofreadResponse.SerializeToString,
            ),
            'InitializeDiscussion': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeDiscussion,
                    request_deserializer=ai__service__pb2.DiscussionInitRequest.FromString,
                    response_serializer=ai__service__pb2.DiscussionInitResponse.SerializeToString,
            ),
            'ProcessChatMessage': grpc.stream_stream_rpc_method_handler(
                    servicer.ProcessChatMessage,
                    request_deserializer=ai__service__pb2.ChatMessageRequest.FromString,
                    response_serializer=ai__service__pb2.ChatMessageResponse.SerializeToString,
            ),
            'EndDiscussion': grpc.unary_unary_rpc_method_handler(
                    servicer.EndDiscussion,
                    request_deserializer=ai__service__pb2.DiscussionEndRequest.FromString,
                    response_serializer=ai__service__pb2.DiscussionEndResponse.SerializeToString,
            ),
            'EndMeeting': grpc.unary_unary_rpc_method_handler(
                    servicer.EndMeeting,
                    request_deserializer=ai__service__pb2.MeetingEndRequest.FromString,
                    response_serializer=ai__service__pb2.MeetingEndResponse.SerializeToString,
            ),
            'GetChatHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChatHistory,
                    request_deserializer=ai__service__pb2.GetChatHistoryRequest.FromString,
                    response_serializer=ai__service__pb2.GetChatHistoryResponse.SerializeToString,
            ),
            'GetChatSessionStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChatSessionStats,
                    request_deserializer=ai__service__pb2.ChatSessionStatsRequest.FromString,
                    response_serializer=ai__service__pb2.ChatSessionStatsResponse.SerializeToString,
            ),
            'ProcessStructuredDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessStructuredDocument,
                    request_deserializer=ai__service__pb2.ProcessDocumentRequest.FromString,
                    response_serializer=ai__service__pb2.DocumentResponse.SerializeToString,
            ),
            'ProcessPdf': grpc.stream_unary_rpc_method_handler(
                    servicer.ProcessPdf,
                    request_deserializer=ai__service__pb2.ProcessPdfRequest.FromString,
                    response_serializer=ai__service__pb2.ProcessPdfResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bgbg.ai.AIService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AIService(object):
    """AI Service Definition
    """

    @staticmethod
    def GenerateQuiz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bgbg.ai.AIService/GenerateQuiz',
            ai__service__pb2.QuizRequest.SerializeToString,
            ai__service__pb2.QuizResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProofreadText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bgbg.ai.AIService/ProofreadText',
            ai__service__pb2.ProofreadRequest.SerializeToString,
            ai__service__pb2.ProofreadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitializeDiscussion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bgbg.ai.AIService/InitializeDiscussion',
            ai__service__pb2.DiscussionInitRequest.SerializeToString,
            ai__service__pb2.DiscussionInitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessChatMessage(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/bgbg.ai.AIService/ProcessChatMessage',
            ai__service__pb2.ChatMessageRequest.SerializeToString,
            ai__service__pb2.ChatMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndDiscussion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bgbg.ai.AIService/EndDiscussion',
            ai__service__pb2.DiscussionEndRequest.SerializeToString,
            ai__service__pb2.DiscussionEndResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndMeeting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bgbg.ai.AIService/EndMeeting',
            ai__service__pb2.MeetingEndRequest.SerializeToString,
            ai__service__pb2.MeetingEndResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChatHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bgbg.ai.AIService/GetChatHistory',
            ai__service__pb2.GetChatHistoryRequest.SerializeToString,
            ai__service__pb2.GetChatHistoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChatSessionStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bgbg.ai.AIService/GetChatSessionStats',
            ai__service__pb2.ChatSessionStatsRequest.SerializeToString,
            ai__service__pb2.ChatSessionStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessStructuredDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bgbg.ai.AIService/ProcessStructuredDocument',
            ai__service__pb2.ProcessDocumentRequest.SerializeToString,
            ai__service__pb2.DocumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessPdf(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/bgbg.ai.AIService/ProcessPdf',
            ai__service__pb2.ProcessPdfRequest.SerializeToString,
            ai__service__pb2.ProcessPdfResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
